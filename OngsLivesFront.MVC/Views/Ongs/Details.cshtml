@model Ong

@{
    Layout = "_Layout_mobile";
}

@{
    ViewData["Title"] = "Perfil da Ong";
}

<style>
    h1 {
        text-align:center;
    }
    
    .container-perfil {
        display: flex;
        justify-content: center;
        align-items: center;
        flex-direction: column;
        gap:20px;

       /* background-color: green;*/
    }

    .imagem-perfil-container {
        display: flex;
        justify-content:center;
        margin-top:10px;


    }

    .imagem-perfil-container img {
        width: 50vw;
        border-radius: 5px;
    }

    .iframe-mapa {
        width: 70vw;
        height: 200px;
    }

    .botoes-mapa {
        padding: 5px;

    }

    .map-container {
        margin-top: 20px;
    }


    .btn-map-android{
        padding: 10px 20px;
        min-width: 30px;
        border: 1px solid rgba(0,0,0,0.5);
        border-radius:4px;
        color: rgba(0,0,0,0.6);
        background-color: greenyellow;
    }
    .btn-map-ios {
        padding: 10px 20px;
        min-width: 30px;
        border: 1px solid rgba(0,0,0,0.5);
        border: 0px;
        border-radius:4px;
        color: rgba(0,0,0,0.7);
        background-color: deepskyblue;
        margin-left: 10px;
    }
</style>

<h1>Perfil</h1>

<div>

    <div class="imagem-perfil-container">
        <img src="~/img/ongs-perfil.jpg" alt="" />
    </div>
    <hr />
    <dl class="row">
        <dt class="col-sm-2">
            Matricula
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.Id)
        </dd>
        <dt class = "col-sm-2">
            Razão Social
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.Nome)
        </dd>
        <dt class = "col-sm-2">
            CNPJ
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.CNPJ)
        </dd>
        <dt class = "col-sm-2">
            Telefone
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.Telefone)
        </dd>
        <dt class = "col-sm-2">
            E-mail
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.Email)
        </dd>
        <dt class = "col-sm-2">
            Area de Atuação
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.AreaAtuacao)
        </dd>
        <dt class = "col-sm-2">
            Quantidade de Empregados
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.QuantidadeEmpregados)
        </dd>

    </dl>

    <hr />

        <div class="container-perfil">



            <div class="map-container">
                <iframe class="iframe-mapa" width="100%"
                        height="100%"
                        frameborder="0"
                        style="border:1px solid rgba(0,0,0,1)"
            src="https://www.google.com/maps/embed/v1/place?key=AIzaSyA5caEwpXijUm3VTmIg6fRpZ0DFiXj95hw&zoom=15&q=@Model.Endereco.EnderecoLinha,@Model.Endereco.Numero,@Model.Endereco.Bairro,@Model.Endereco.Cidade">
                </iframe>

            </div>

            <div class="botoes-mapa">
                <button class="btn-map-android" onclick="traceRouteToDestination()">Android</button>
                <button class="btn-map-ios" onclick="traceRouteToDestinationIOS()">IOS</button>
            </div>

        </div>






</div>

@*<div>
    <a asp-action="Edit" asp-route-id="@Model?.Id">Edit</a> |
    <a asp-action="Index">Back to List</a>
</div>*@


<script>
    // Suponha que você tenha as coordenadas do destino
    const destinationLatitude = -10.9346211;
    const destinationLongitude = -37.0704384;

// Função para iniciar o processo de traçar a rota
function traceRouteToDestination() {
  // Verifica se o navegador suporta a geolocalização
  if (navigator.geolocation) {
    navigator.geolocation.getCurrentPosition((position) => {
      // Obtem as coordenadas do usuário
      const userLatitude = position.coords.latitude;
      const userLongitude = position.coords.longitude;

      // Cria um objeto de direções do Google Maps
      const directionsService = new google.maps.DirectionsService();

      // Configura as informações de origem e destino
      const origin = new google.maps.LatLng(userLatitude, userLongitude);
      const destination = new google.maps.LatLng(destinationLatitude, destinationLongitude);

      // Define as opções para a solicitação da rota
      const request = {
        origin: origin,
        destination: destination,
        travelMode: google.maps.TravelMode.DRIVING // Modo de transporte (pode ser DRIVING, WALKING, etc.)
      };

      // Envia a solicitação de rota para o serviço de direções
      directionsService.route(request, (result, status) => {
        if (status === google.maps.DirectionsStatus.OK) {
          // Renderiza a rota no mapa
          const directionsRenderer = new google.maps.DirectionsRenderer();
          directionsRenderer.setMap(map); // Substitua "map" pelo objeto do seu mapa
          directionsRenderer.setDirections(result);
        } else {
          console.error('Erro ao traçar a rota:', status);
        }
      });
    }, (error) => {
      console.error('Erro ao obter a localização do usuário:', error);
    });
  } else {
    console.error('Geolocalização não suportada pelo navegador.');
  }
}


function traceRouteToDestinationIOS() {
  if (navigator.geolocation) {
    navigator.geolocation.getCurrentPosition((position) => {
      const userLatitude = position.coords.latitude;
      const userLongitude = position.coords.longitude;

      const destination = `${destinationLatitude},${destinationLongitude}`;
      const mapsUrl = `maps://maps.apple.com/?saddr=${userLatitude},${userLongitude}&daddr=${destination}`;

      window.location.href = mapsUrl;
    }, (error) => {
      console.error('Erro ao obter a localização do usuário:', error);
    });
  } else {
    console.error('Geolocalização não suportada pelo navegador.');
  }
}
</script>
